name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 🔧 Install TA-Lib System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install PyQt6 system dependencies
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libdbus-1-3 \
          libxkbcommon-x11-0 \
          libxi6 \
          libxtst6
        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        sudo ldconfig
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        echo "📋 Installing main dependencies..."
        pip install -v -r requirements.txt
        echo "📋 Installing development dependencies..."
        pip install -v -r requirements-dev.txt
        echo "✅ All dependencies installed successfully"
        
    - name: 🎨 Format Check (Black)
      run: black --check --diff src/ tests/
      
    - name: 📏 Lint Check (Flake8)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: 🔍 Type Check (MyPy)
      run: mypy src/ --ignore-missing-imports
      
    - name: 📋 Import Sorting (isort)
      run: isort --check-only --diff src/ tests/

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 🔧 Install TA-Lib System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install PyQt6 system dependencies
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libdbus-1-3 \
          libxkbcommon-x11-0 \
          libxi6 \
          libxtst6
        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        sudo ldconfig
        
    - name: 📦 Install Security Tools
      run: |
        python -m pip install --upgrade pip
        echo "📋 Installing security tools..."
        pip install -v bandit safety
        echo "✅ Security tools installed successfully"
      env:
        QT_QPA_PLATFORM: 'offscreen'
        
    - name: 🔒 Security Lint (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json || true
      
    - name: 🛡️ Dependency Security Check (Safety)
      run: safety check --json --output safety-report.json || true
      
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 🔧 Install TA-Lib System Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install PyQt6 system dependencies
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libdbus-1-3 \
          libxkbcommon-x11-0 \
          libxi6 \
          libxtst6
        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        sudo ldconfig
        
    - name: 🔧 Install TA-Lib System Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ta-lib
        
    - name: 🔧 Install TA-Lib System Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Use pre-built TA-Lib wheel for Windows
        pip install --find-links https://github.com/cgohlke/talib-build/releases/latest/download/ TA-Lib || echo "TA-Lib installation failed, will use fallback"
        
    - name: 🖥️ Setup Display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        echo "📋 Installing main dependencies..."
        pip install -v -r requirements.txt
        echo "📋 Installing development dependencies..."
        pip install -v -r requirements-dev.txt
        echo "✅ All dependencies installed successfully"
      env:
        QT_QPA_PLATFORM: 'offscreen'
        DISPLAY: ':99'
        
    - name: 🧪 Run Tests
      run: |
        pytest tests/ \
          --verbose \
          --cov=src/ \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=pytest-results.xml
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
        
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest-results.xml
          coverage.xml
          
    - name: 📊 Upload Coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 🔧 Install TA-Lib System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install PyQt6 system dependencies
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libdbus-1-3 \
          libxkbcommon-x11-0 \
          libxi6 \
          libxtst6
        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        sudo ldconfig
        
    - name: 📦 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        echo "📋 Installing build dependencies..."
        pip install -v build twine
        echo "✅ Build dependencies installed successfully"
      env:
        QT_QPA_PLATFORM: 'offscreen'
        
    - name: 🏗️ Build Package
      run: python -m build
      
    - name: 🔍 Check Package
      run: twine check dist/*
      
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 🔧 Install TA-Lib System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install PyQt6 system dependencies
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libxrender1 \
          libdbus-1-3 \
          libxkbcommon-x11-0 \
          libxi6 \
          libxtst6
        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        sudo ldconfig
        
    - name: 🖥️ Setup Display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -v -r requirements.txt
        pip install -v -r requirements-dev.txt
        
    - name: 🧪 Run Integration Tests
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from main import ChartPredictorApp
        print('✅ Application imports successfully')
        "
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
        
    - name: 🔗 Test Live Data Integration
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from core.live_data_fetcher import LiveDataFetcher
        from config.settings import AppSettings
        
        settings = AppSettings()
        fetcher = LiveDataFetcher(settings)
        print('✅ Live data fetcher initialized successfully')
        "
      env:
        QT_QPA_PLATFORM: 'offscreen'

  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Check Documentation Links
      run: |
        # Check for broken markdown links
        find . -name "*.md" -exec grep -l "http" {} \; | head -10
        
    - name: 📋 Validate Markdown
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-config.json'
      continue-on-error: true

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, security, test, build, integration-test, documentation]
    if: always()
    
    steps:
    - name: 📊 Summary
      run: |
        echo "## 📊 CI Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation.result }} |" >> $GITHUB_STEP_SUMMARY